{"remainingRequest":"/opt/dibbi.docs/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/opt/dibbi.docs/node_modules/cache-loader/dist/cjs.js??ref--1-0!/opt/dibbi.docs/node_modules/vue-loader/lib/index.js??ref--1-1!/opt/dibbi.docs/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/opt/dibbi.docs/src/guide/cadastro.md?vue&type=template&id=d0fd0190&","dependencies":[{"path":"/opt/dibbi.docs/src/guide/cadastro.md","mtime":1657412957993},{"path":"/opt/dibbi.docs/node_modules/cache-loader/dist/cjs.js","mtime":1656271394553},{"path":"/opt/dibbi.docs/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1656271386265},{"path":"/opt/dibbi.docs/node_modules/cache-loader/dist/cjs.js","mtime":1656271394553},{"path":"/opt/dibbi.docs/node_modules/vue-loader/lib/index.js","mtime":1656271386265},{"path":"/opt/dibbi.docs/node_modules/@vuepress/markdown-loader/index.js","mtime":1656271382633}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}